{Application 'MENU' logic file generated by CSPro}
{
Notes:
 - IDs are 3 digits
 - Supervisor IDs must be 4 digits starting with 1 and foll0wed by three digits
 - Enumerator IDs must be 4 digits starting with 0 and followed by three digits
 - this is to avoid possible clashes since each ID must be unique in order for the login to work. A different solution can be found if needed but for now this works based on the information that I have.
 - since the VRs don't need to be filled out beforehand we can treat it as the enumerator report and let enumerators choose their own id info
TODO:
 - Need to be able to specify ED for Visitation Record and Household Questionnaires
 - DONE Need to pass certain variables to the visitation record and questionnaire. i.e. interview status, Enumerator ID, Supervisor ID
 - need to implement allocation form
 - Need to create a structure for senior supervisor, supervisor and enumerator
}
PROC GLOBAL
//-----------------Variable Declaration-------------------
file	pffFile,		//creates .pff file
		loginfile,		//saves login status in a file
		pffExcel,		//points to Excel file
		edfile,			//saves ed completion status
		menufile,		//saves menu location
		batFile;		//bat file to launch allocation excel file
		
config	cswebip1,		//Stores CSWeb address
		cswebip2,		//Stores CSWeb secondary address
		ftpun, 			//stores ftp username
		ftppw;			//stores ftp password
		
numeric par,			//temp Parish variable
		usertype,		//sets user type
		errflag,		//sets error flag
		version,		//version number
		lastupdate,		//last update version day
		updated,		//Last time the app was updated
		deleteflag,		//stores flag for case deletion
		housecount,		//counts number of households
		indivcounttot,	//counts total number of individuals in an ED
		allocationdate,	//last allocation date
		role,			//stores user role (enumerator, supervisor, senior supervisor, etc)
		a,i,j,k,l,m,n;		//general counters and temp variables

string	cases,			//case id
		status,			//holds current login status
		username,		//stores user name
		uid,			//stores user ID for getting allocations
		edstatus,		//stores ed for ed status file
		partial,		//Stores ispartial status (partial,completed)
		menu;			//stores menu location

//-------------------Array Declaration--------------------
array string vsCode(300);
array string vsLabel(300);
array numeric	vsEDCode(10);
array string address(300,3);	//stores addresses
array string VRARRAY(300,17);	//stores Visitation report data (200 = number of records, 18 = number of fields (VI_BUILDING, VI_DWELLING_UNIT, VI_HOUSEHOLD, VI_STATUS, VI_ADDRESS1, VI_ADDRESS2, VI_LAST_NAME, VI_FIRST_NAME, VI_TOTAL, VI_MALES, VI_FEMALES, VI_MALES_RESIDENT_ABROAD, VI_FEMALES_RESIDENT_ABROAD, VI_DATE_STARTED, VI_DATE_COMPLETED, VI_LATITUDE, VI_LONGITUDE, VI_COMMENTS, VI_ENUMERATOR))

//------------------Function Declaration------------------
//Launches the visitation record
function launchVR()
	// ALW - Added stop
	//execpff("..\Visitation record\Visitation record.pff", stop);
	string pffFilename = Pathname(application) + "../Visitation Record/Visitation Record.pff";
	setfile(pffFile,pffFilename,create);

	filewrite(pffFile,"[Run Information]");
	filewrite(pffFile,"Version=CSPro 7.2");
	filewrite(pffFile,"AppType=Entry");
	filewrite(pffFile,"Description=Census VR");

	filewrite(pffFile,"[DataEntryInit]");
	filewrite(pffFile,"OperatorID=%s",UNAME);
	filewrite(pffFile,"StartMode=Add");
	filewrite(pffFile,"ShowInApplicationListing=Hidden");
	if getos() = 20 then				//only include the following line if on an android tablet
		filewrite(pffFile,"Lock=CaseListing");
	endif;
	filewrite(pffFile,"AutoAdd=Yes");

	filewrite(pffFile,"[Files]");
	filewrite(pffFile,"Application=%s","./Visitation Record.ent");
	filewrite(pffFile,"InputData=%s","../Data/VisitationRecord.csdb|CSPRODB");
	filewrite(pffFile,"Paradata=%s",maketext("../Data/VR%v-%v.cslog",ME_ED,UNAME));
	
	filewrite(pffFile,"[UserFiles]");
	filewrite(pffFile,"PFFFILE=%s","");

	filewrite(pffFile,"[Parameters]");
	filewrite(pffFile,"OnExit=../Menu/Menu.pff");
	filewrite(pffFile,"MODE=DEFAULT");
	filewrite(pffFile,"PARISH=%V",ME_PARISH);	
	filewrite(pffFile,"ED=%V",ME_ED);
	filewrite(pffFile,"LSTENUMCODE=%s",maketext("%v",visualvalue(USERID)));
	filewrite(pffFile,"LSTED=%s",maketext("%v",ME_ED));
		
	close(pffFile);
	
	execpff(filename(pffFile), stop);
end;

{//Launches the Visitation Record for Supervisors
function launchSupervisorVR()

	string pffFilename = pathname(application) + "..\Visitation Record\Visitation Record.pff";
	setfile(pffFile,pffFilename,create);

	filewrite(pffFile,"[Run Information]");
	filewrite(pffFile,"Version=CSPro 7.1");
	filewrite(pffFile,"AppType=Entry");
	filewrite(pffFile,"Description=CLFSS Control Sheet");

	filewrite(pffFile,"[DataEntryInit]");
	filewrite(pffFile,"OperatorID=%s",UNAME);
	filewrite(pffFile,"StartMode=Add;%s",CHOOSE_VR);
	filewrite(pffFile,"ShowInApplicationListing=Hidden");
	filewrite(pffFile,"Lock=CaseListing");
	filewrite(pffFile,"AutoAdd=No");

	filewrite(pffFile,"[Files]");
	filewrite(pffFile,"Application=%s","./Visitation Record.ent");
	filewrite(pffFile,"InputData=%s","../Data/Visitation Record.csdb|CSPRODB");
	filewrite(pffFile,"Paradata=%s","../Data/Visitation Record.cslog");
	
	filewrite(pffFile,"[UserFiles]");
	filewrite(pffFile,"PFFFILE=%s","");

	filewrite(pffFile,"[Parameters]");
	filewrite(pffFile,"OnExit=../Menu/Menu.pff");
	
	filewrite(pffFile,"MODE=EDIT");
	filewrite(pffFile,"VI_PARISH=%s",CHOOSE_VR[1:2]);	//TODO: DONE The following has to be edited to capture the correct variables
	filewrite(pffFile,"VI_ED=%s",CHOOSE_VR[3:3]);
	filewrite(pffFile,"VI_BUILDING=%s",CHOOSE_VR[6:3]);
	filewrite(pffFile,"VI_DWELLING_UNIT=%s",CHOOSE_VR[9:3]);
	filewrite(pffFile,"VI_HOUSEHOLD=%s",CHOOSE_VR[12:3]);
	
	close(pffFile);

	execpff(filename(pffFile), stop);
end;}

//searches an array and returns the position (Originally written by Gregory Martin)
function searchArray(array string arrayName(,),string findValue) 

    numeric foundPos,itr;
    
    do itr = 1 while itr <= tblrow(arrayName) and not foundPos
        
        if arrayName(itr,1) = findValue then
            foundPos = itr;
        endif;
    
    enddo;
    
    searchArray = foundPos;

end;

//Launches the Questionnaire to add a household only
function addQuestionnaire()

	string pffFilename = pathname(application) + "..\Questionnaire\Census2020Ver2.pff";
	setfile(pffFile,pffFilename,create);

	filewrite(pffFile,"[Run Information]");
	filewrite(pffFile,"Version=CSPro 7.3");
	filewrite(pffFile,"AppType=Entry");
	filewrite(pffFile,"Description=Barbados 2020 Census Questionnaire");

	filewrite(pffFile,"[DataEntryInit]");
	filewrite(pffFile,"OperatorID=%s",UNAME);
	// ALW - The below line will add the case if it does not exist
	// or enter the case in modify mode if it does
	filewrite(pffFile,"StartMode=Add");
	filewrite(pffFile,"ShowInApplicationListing=Hidden");
	filewrite(pffFile,"AutoAdd=No");
	filewrite(pffFile,"Lock=CaseListing");

	filewrite(pffFile,"[Files]");
	filewrite(pffFile,"Application=%s","./Census2020Ver2.ent");
	filewrite(pffFile,"InputData=%s","../Data/CensusData.csdb|CSPRODB");
	filewrite(pffFile,"Paradata=%s",maketext("../Data/Census%v-%v.cslog",ME_ED,UNAME));

	filewrite(pffFile,"[ExternalFiles]");
	filewrite(pffFile,"VISITATION_RECORD_DICT=%s","../Data/VisitationRecord.csdb|CSPRODB");
	filewrite(pffFile, "INDUSTRY_CODES_DICT=%v", "../Data/IndustryCodes.csdb|CSPRODB");
	filewrite(pffFile, "OCCUPATION_CODES_DICT=%v", "../Data/OccupationCodesBARSOC.csdb|CSPRODB");

	filewrite(pffFile,"[UserFiles]");
	filewrite(pffFile,"PFFFILE=%s","");

	filewrite(pffFile,"[Parameters]");
	filewrite(pffFile,"OnExit = ../Menu/Menu.pff");
	
	filewrite(pffFile,"PARISH=%V",ME_PARISH);	
	filewrite(pffFile,"ED=%V",ME_ED);
	filewrite(pffFile,"USERID=%V",USERID);

	close(pffFile);

	// ALW - Added stop
	execpff(filename(pffFile), stop);
end;

//function to view an already completed questionnaire
function viewQuestionnaire()
string pffFilename = pathname(application) + "..\Questionnaire\Census2020Ver2.pff";
	setfile(pffFile,pffFilename,create);

	filewrite(pffFile,"[Run Information]");
	filewrite(pffFile,"Version=CSPro 7.3");
	filewrite(pffFile,"AppType=Entry");
	filewrite(pffFile,"Description=Barbados 2020 Census Questionnaire");

	filewrite(pffFile,"[DataEntryInit]");
	filewrite(pffFile,"OperatorID=%s",UNAME);
	// ALW - The below line will add the case if it does not exist
	// or enter the case in modify mode if it does
	filewrite(pffFile,"StartMode=Add;%v",CHOOSE_HOUSEHOLD);
	filewrite(pffFile,"ShowInApplicationListing=Hidden");
	filewrite(pffFile,"AutoAdd=No");
	filewrite(pffFile,"Lock=CaseListing,Stats");

	filewrite(pffFile,"[Files]");
	filewrite(pffFile,"Application=%s","./Census2020Ver2.ent");
	filewrite(pffFile,"InputData=%s","../Data/CensusData.csdb|CSPRODB");
	filewrite(pffFile,"Paradata=%s",maketext("../Data/Census%V-%V.cslog",ME_ED,UNAME));

	filewrite(pffFile,"[ExternalFiles]");
	filewrite(pffFile,"VISITATION_RECORD_DICT=%s","../Data/VisitationRecord.csdb|CSPRODB");
	filewrite(pffFile, "INDUSTRY_CODES_DICT=%v", "../Data/IndustryCodes.csdb|CSPRODB");
	filewrite(pffFile, "OCCUPATION_CODES_DICT=%v", "../Data/OccupationCodesBARSOC.csdb|CSPRODB");

	filewrite(pffFile,"[UserFiles]");
	filewrite(pffFile,"PFFFILE=%s","");

	filewrite(pffFile,"[Parameters]");
	filewrite(pffFile,"OnExit = ../Menu/Menu.pff");
	
	filewrite(pffFile,"PARISH=%S",CHOOSE_HOUSEHOLD[1:2]);		//CHOOSE_HOUSEHOLD[X:Y] where x = starting position, y = length
	filewrite(pffFile,"ED=%S",CHOOSE_HOUSEHOLD[3:3]);
	filewrite(pffFile,"USERID=%V",USERID);
	filewrite(pffFile,"BUILDING=%S",CHOOSE_HOUSEHOLD[6:3]);
	filewrite(pffFile,"DWELLING_UNIT=%S",CHOOSE_HOUSEHOLD[9:3]);
	filewrite(pffFile,"HOUSEHOLD=%S",CHOOSE_HOUSEHOLD[12:3]);
	
	close(pffFile);
	
	execpff(filename(pffFile), stop);
end;

//function that launches form to allocate enumerators
function allocateenum();
	//define file locations
	string excelfile = pathname(Application) + "../Allocation/logins.xlsx";		//point to location of logins file
	string batallocation = pathname(Application) + "../Allocation/launchallocation.bat";
	string line1 = pathname(ProgramFiles64)+"Microsoft Office\Office16\EXCEL.exe";
	string pffFilename = pathname(Application) + "../Allocation/users.pff";
	
	//open file aliases
	setfile(pffFile,pffFilename,update);
	setfile(batFile,batallocation,create);
	setfile(pffExcel,excelfile,update);		//set file for reading
	
	//close files
	close(pffExcel);
	close(pffFile);
	
	//execute files
	//errmsg('"%v" "%v"',line1,excelfile);
	if getos() in 10,30 then
		filewrite(batFile,maketext('"%v" "logins.xlsx"',line1));
		filewrite(batFile,"users.pff");
		close(batFile);
		execsystem(filename(batFile));
		//execsystem(maketext('"%v" "%v"',line1,excelfile));		//edit excel
	elseif getos() = 20 then
		execsystem("view:"+excelfile);
	endif;
	execpff(filename(pffFile), stop);	//convert to csdb
end

//Function to upload all Census and VR data
function uploadData()
	errflag = 0;		//clears  flag
	if syncconnect(CSWeb,cswebip1,ftpun,ftppw) or syncconnect(CSWeb,cswebip2,ftpun,ftppw) then	//connect to FTP when outside of the Government WAN
		if not syncdata(PUT,CENSUS2020_DICT,maketext("%v%v",ME_PARISH,ME_ED)) then		//Upload Labourforce data
			inc(errflag);
		endif;
		if not syncdata(PUT,VISITATION_RECORD_DICT,maketext("%v%v",ME_PARISH,ME_ED)) then		//Upload Control Sheet
			inc(errflag);
		endif;
		if not syncdata(GET, USERS_DICT) then		//get allocations
			inc(errflag);
		endif;
		if fileexist(maketext("../Data/Census%v-%v.cslog",ME_ED,UNAME)) then
			if not syncfile(PUT,maketext("../Data/Census%v-%v.cslog",ME_ED,UNAME),maketext("CensusLogs/Census%V-%V.cslog",ME_ED,UNAME)) then		//Upload paradata logs
				inc(errflag);
			endif;
		endif;
		if fileexist(maketext("../Data/VR%v-%v.cslog",ME_ED,UNAME)) then
			if not syncfile(PUT,maketext("../Data/VR%v-%v.cslog",ME_ED,UNAME),maketext("CensusLogs/VR%V-%V.cslog",ME_ED,UNAME)) then		//Upload paradata logs
				inc(errflag);
			endif;
		endif;
		if not syncfile(GET,"/Census/Update/Questionnaire/Census2020Ver2.pen","../Questionnaire/Census2020Ver2.pen") then		//update questionnaire
			inc(errflag);
		endif;
		if not syncfile(GET,"/Census/Update/Visitation Record/Visitation Record.pen","../Visitation Record/Visitation Record.pen") then		//update control sheet
			inc(errflag);
		endif;
		{if not syncfile(GET,"/Census/Update/Allocation/Assignments.pen","../Allocation/Assignments.pen") then		//update Allocation form
			inc(errflag);
		endif;}
		if not syncfile(GET,"/Census/Update/Menu/Menu.pen","../Menu/Menu.pen") then		//update Menu
			inc(errflag);
		endif;
		if not syncfile(GET,"/Census/Update/Menu/Menu.pff","../Menu/Menu.pff") then		//update Menu
			inc(errflag);
		endif;
		if not syncfile(GET,"/Census/Update/Visitation Record/vrreport.html","../Visitation Record/vrreport.html") then		//report template
			inc(errflag);
		endif;
		syncdisconnect();		//disconnect
	else
		inc(errflag,2);
	endif;
	if errflag > 1 then
		errmsg("Data upload failed, please try again. %d errors were found",errflag);
	elseif errflag = 0 then
		errmsg("Data upload was successful");
		savesetting("Updated",maketext("%d",sysdate("YYYYMMDD")));
	elseif errflag = 1 then
		errmsg("Data upload was probably successful but there was an error, please restart the app and try again to make sure. If you keep getting this error please contact the IT dept"); 
	endif;
end;

//update app only
function updateApp()
	errflag = 0;
	if syncconnect(CSWeb,cswebip1,ftpun,ftppw) or syncconnect(CSWeb,cswebip2,ftpun,ftppw)  then		//connect to FTP when outside of the Government WAN
		if not syncdata(GET, USERS_DICT) then		//get allocations
			inc(errflag);
		endif;
		if not syncfile(GET,"/Census/Update/Questionnaire/Census2020Ver2.pen","../Questionnaire/Census2020Ver2.pen") then		//update questionnaire
			inc(errflag);
		endif;
		if not syncfile(GET,"/Census/Update/Visitation Record/Visitation Record.pen","../Visitation Record/Visitation Record.pen") then		//update Control Sheets
			inc(errflag);
		endif;
		{if not syncfile(GET,"/Census/Update/Allocation/Assignments.pen","../Allocation/Assignments.pen") then		//update Allocation form
			inc(errflag);
		endif;}
		if not syncfile(GET,"/Census/Update/Menu/Menu.pen","../Menu/Menu.pen") then		//update Menu
			inc(errflag);
		endif;
		if not syncfile(GET,"/Census/Update/Menu/Menu.pff","../Menu/Menu.pff") then		//update Menu
			inc(errflag);
		endif;
{		if not syncfile(GET,"/CSPro/Update/Reports/EnumerationReport.pen","../Reports/EnumerationReport.pen") then		//update Enumeration Report
			inc(errflag);
		endif;
}		if not syncfile(GET,"/Census/Update/Visitation Record/vrreport.html","../Visitation Record/vrreport.html") then		//report template
			inc(errflag);
		endif;
		syncdisconnect();		//disconnect
	else
		inc(errflag,2);
	endif;
	if errflag > 1 then
		errmsg("App update failed, please try again. %d errors were found",errflag);
	elseif errflag = 0 then
		errmsg("App update was successful. Please restart the app to see any changes");
		savesetting("Updated",maketext("%d",sysdate("YYYYMMDD")));
		execpff("Menu.pff",stop);
	elseif errflag = 1 then
		errmsg("App update was probably successful but there was an error, please restart the app and try again to make sure. If you keep getting this error please contact the IT dept"); 
	endif;
end;

//Function to download Census and VR data for an ED
function downloadData()
	errflag = 0;
	errmsg("Attempting to download all data from ED :%d",ME_ED);
	//errmsg("Data dictionary value Round :%V, ED :%V", RNDNO,EDNO);
	if syncconnect(CSWeb,cswebip1,ftpun,ftppw) or syncconnect(CSWeb,cswebip2,ftpun,ftppw) then		//connect to FTP when outside of the government WAN
		if not syncdata(GET,CENSUS2020_DICT,maketext("%v%v",ME_PARISH,ME_ED)) then		//get labourforce data for round and ED
			inc(errflag);
		endif;
		if not syncdata(GET,VISITATION_RECORD_DICT,maketext("%v%v",ME_PARISH,ME_ED)) then			//get control sheet data for round and ED
			inc(errflag);
		endif;
		if not syncdata(GET, USERS_DICT) then		//get allocations
			inc(errflag);
		endif;
{		if not syncdata(get,ENUMERATIONREPORT_DICT,maketext("%v",ME_ED)) then	//get enumeration report for ED
			inc(errflag);
		endif;
}		//syncfile(GET,"CSPro/Photos/*.jpg","../Photos/");
		if not syncfile(GET,"/Census/Update/Questionnaire/Census2020Ver2.pen","../Questionnaire/Census2020Ver2.pen") then		//update questionnaire
			inc(errflag);
		endif;
		if not syncfile(GET,"/Census/Update/Visitation Record/Visitation Record.pen","../Visitation Record/Visitation Record.pen") then		//update control sheet
			inc(errflag);
		endif;
		{if not syncfile(GET,"/Census/Update/Allocation/Assignments.pen","../Allocation/Assignments.pen") then		//update Allocation form
			inc(errflag);
		endif;}
		if not syncfile(GET,"/Census/Update/Menu/Menu.pen","../Menu/Menu.pen") then		//update Menu
			inc(errflag);
		endif;
		if not syncfile(GET,"/Census/Update/Menu/Menu.pff","../Menu/Menu.pff") then		//update Menu
			inc(errflag);
		endif;
{		if not syncfile(GET,"/CSPro/Update/Reports/EnumerationReport.pen","../Reports/EnumerationReport.pen") then		//update Enumeration Report
			inc(errflag);
		endif;
}		if not syncfile(GET,"/Census/Update/Visitation Record/vrreport.html","../Visitation Record/vrreport.html") then		//report template
			inc(errflag);
		endif;
		syncdisconnect();		//disconnect
	else
		inc(errflag,2);
	endif;
	if errflag > 1 then
		errmsg("Download of ED %d failed, Please try again. %d errors were found",ME_ED,errflag);
	elseif errflag = 0 then
		errmsg("Download of ED %d was successful",ME_ED);
		savesetting("Updated",maketext("%d",sysdate("YYYYMMDD")));
	elseif errflag = 1 then
		errmsg("Download of ED %d failed, Please try again",ME_ED);
	endif;
end;

//fills visitation record report and displays it
function viewVisitationRecord()
	i = 1;
	m = 1;
	n = 1;
	
	//initialize array
	while m <= 300 do
		while n <= 17 do
			VRARRAY(m,n) = "";
			inc(n);
		enddo;
		inc(m);
	enddo;
	
	//fill array
	forcase VISITATION_RECORD_DICT where VI_ED = ME_ED do
		VRARRAY(i,1) = maketext("%V",VI_BUILDING);
		VRARRAY(i,2) = maketext("%V",VI_DWELLING_UNIT);
		VRARRAY(i,3) = maketext("%V",VI_HOUSEHOLD);
		VRARRAY(i,4) = maketext("%V",VI_STATUS);
		VRARRAY(i,5) = maketext("%V",VI_ENUMERATOR);
		VRARRAY(i,6) = maketext("%V, %V",strip(VI_ADDRESS1),strip(VI_ADDRESS2));
		VRARRAY(i,7) = VI_LAST_NAME;
		VRARRAY(i,8) = VI_FIRST_NAME;
		VRARRAY(i,9) = maketext("%V",VI_TOTAL);
		VRARRAY(i,10) = maketext("%V",VI_MALES);
		VRARRAY(i,11) = maketext("%V",VI_FEMALES);
		VRARRAY(i,12) = maketext("%V",VI_MALES_RESIDENT_ABROAD);
		VRARRAY(i,13) = maketext("%V",VI_FEMALES_RESIDENT_ABROAD);
		VRARRAY(i,14) = maketext("%V",VI_DATE_STARTED);
		VRARRAY(i,15) = maketext("%V",VI_DATE_COMPLETED);
		VRARRAY(i,16) = maketext("%V, %V",VI_LATITUDE,VI_LONGITUDE);
		VRARRAY(i,17) = VI_COMMENTS;
		inc(indivcounttot,VI_TOTAL);		//total persons (part B's)
		inc(i);
	endfor;
	housecount = countcases(CENSUS2020_DICT where ED = ME_ED and END_DATE <> notappl);		//counts completed households (Part A's)
	
	//create report
	setreportdata("HOUSECOUNT",maketext("%V",housecount));
	setreportdata("INDIVCOUNTTOT",maketext("%V",indivcounttot));
	setreportdata("PARVR",maketext("%V",getlabel(ME_PARISH_VS1,ME_PARISH)));
	setreportdata("EDVR",maketext("%V",ME_ED));
	setreportdata("EDCOMPLETE",getlabel(ED_STATUS_VS1,ED_STATUS));
	setreportdata(VRARRAY);
	report("../Visitation record/vrreport.html");		//TODO: create this report
end;

//marks questionnaire for deletion
function deleteQuestionnaire()
	errmsg("Are you sure you want to flag the questionnaire with ID = %V? for deletion", CHOOSE_HOUSEHOLD)
	select("Yes, flag for deletion",continue,"No, flag to remain",INTERVIEWER_MENU);
	
	loadcase(CENSUS2020_DICT,CHOOSE_HOUSEHOLD);
	DELETE_FLAG = 1;		//mark case for deletion
	writecase(CENSUS2020_DICT);
	
	loadcase(VISITATION_RECORD_DICT,CHOOSE_HOUSEHOLD);
	VI_DELETE_FLAG = 1;		//mark case for deletion
	writecase(VISITATION_RECORD_DICT);
	errmsg("Case set for deletion");
end;

//marks Visitation record for deletion
function deleteVR()
	errmsg("Are you sure you want to flag the visitation record with ID = %V? for deletion", CHOOSE_HOUSEHOLD)
	select("Yes, flag for deletion",continue,"No, flag to remain",INTERVIEWER_MENU);
	
	loadcase(VISITATION_RECORD_DICT,CHOOSE_HOUSEHOLD);
	VI_DELETE_FLAG = 1;		//mark case for deletion
	writecase(VISITATION_RECORD_DICT);
	errmsg("Case set for deletion");
end;

//function to mark current ED as complete or ongoing
//TODO: finc some way of saving the ED status on the tablet and server
function edcomplete()
	string edfilename = pathname(application)+"edstatus.dat";
	setfile(edfile,edfilename,append);
	i = 0;
	do until i in 1,2
		i = accept(maketext("Mark ED %0d as complete or ongoing?",ME_ED),"Mark as COMPLETE","Mark as ONGOING");
	enddo;
	if i = 1 then
		ED_STATUS = 1;		//mark as complete
	elseif i = 2 then
		ED_STATUS = 2;		//mark as ongoing
	endif;
	
	edstatus = maketext("%03d",ME_ED);
	if fileread(edfile,edstatus) then		//if the ed was found
		filewrite(edfile,maketext("%d",ED_STATUS));		//change the status on the next line
	else		//if no line found
		filewrite(edfile,"%03d\n%d", ME_ED,ED_STATUS);		//write the ed and status
	endif;
	
	errmsg("ED %0d is now %s. Please select Upload Data in the main menu to save changes",ME_ED,getlabel(ED_STATUS_VS1,ED_STATUS));
end;

//Function that writes login status to a file
function writeloginStatus(x);
	string loginFilename = pathname(application)+"loginflag.dat";
	setfile(loginfile,loginFilename,create);

	filewrite(loginfile,"%d%03d%04d%s",x,visualvalue(ME_ED),USERID,strip(UNAME));	//write value of "x" to file. 1=logged in, 0=logged out
	setoperatorid(strip(UNAME));
	savesetting("UNAME",strip(UNAME));
	
	close(loginfile);
end;

//Function that reads login status and returns 1 (logged in) or 0 (not logged in)
function readloginstatus();
	string loginfilename = pathname(application)+"loginflag.dat";	//set file path
	setfile(loginfile, loginfilename);		//set file handle
	fileread(loginfile, status);			//read file
	close(loginfile);						//close file
	
	readloginstatus = tonumber(status[1:1]);		//set function to file contents
	ME_ED = tonumber(status[2:3]);
	if tonumber(status[1:1]) = 1 then		//if logged in set login details
		USERID = tonumber(status[5:4]);
		UNAME = status[9];
		setoperatorid(status[9]);		//sets operator ID to username
		savesetting("UNAME",strip(UNAME));		//saves username as a setting so that other apps can access
	elseif tonumber(status[1:1]) = 0 then		//if logged out clear login details from form
		USERID = notappl;
		UNAME = "";
	endif;
end;

//saves current place in main menu
function saveMenu();
	string menufilename = pathname(application)+"savemenu.dat";		//set file path
	setfile(menufile, menufilename,create);		//set file handle
	
	filewrite(loginfile,"%d",LOGIN);
	close(menufile);
end;

//resumes to where we left off in the menu
function alpha resumeMenu();
	//read the file
	string menufilename = pathname(application)+"savemenu.dat";
	setfile(menufile, menufilename);
	fileread(menufile, menu);
	close(menufile);
	
	//go to the right place
	if menu <> "" then
		LOGIN = tonumber(menu);
		if LOGIN = 1 then
			advance to INTERVIEWER_MENU;
		elseif LOGIN = 2 then
			advance to SUPERVISOR_MENU;
		endif;
	endif;
	
	//empty the file
	setfile(menufile, menufilename,create);
	filewrite(menufile,"");
	close(menufile);
end;

//displays the manual
function ViewManual()
	execsystem("view:"+pathname(application)+"..Manual.pdf");		//TODO: file to be added
end;

function OnStop()
	stop(1);
end;

PROC MENU_FF
preproc
	userbar(clear);
	userbar(add button, "View Manual", ViewManual());
	userbar(show);

PROC CENSUS_MENU_QUEST
preproc

	//Initialize ftp variables
	//ftpip1 = "64.119.198.70";
	//ftpip2 = "10.129.20.110";
	{ftpun = "Census2020";
	ftppw = "Census2020ADM!NP@ssW)rd";
	cswebip1 = "http://64.119.198.70:8082/csweb/api";
	cswebip2 = "http://10.129.20.110:8082/csweb/api";
	}
	//recode ed to parish
	recode ME_ED => ME_PARISH;
		1-181	=>	1;
		182-295	=>	2;
		296-335	=>	3;
		336-397	=>	4;
		398-418	=>	5;
		419-479	=>	6;
		480-508	=>	7;
		509-521	=>	8;
		522-532	=>	9;
		533-559	=>	10;
		560-583	=>	11;
	endrecode;
	
//-------------------------------------------------------------
PROC UNAME
preproc
	version = publishdate();		//sets version number
	
	lastupdate = int(publishdate() / 1000000);		//yearmonthdate of last version number
	
	updated = tonumber(loadsetting("Updated"));		//Last date app was updated
	//errmsg("sysdate(%d)-lastupdate(%d)=%d",sysdate("YYYYMMDD"),lastupdate,datediff(sysdate("YYYYMMDD"),lastupdate));
	//errmsg("updated(%d)-lastupdate(%d)=%d",updated,lastupdate,datediff(updated,lastupdate));

	
	if (datediff(sysdate("YYYYMMDD"),lastupdate) >= 1) and (datediff(updated,lastupdate) >= 1) and (getos() = 20) then		//if more than one day since last update and on android
		if connection() then		//check for internet connection
			i = 0;
			do until i in 1,2
				i = accept("Current app version is more than one day old. Check for updates?","Yes","No");
			enddo;
			if i = 1 then 
				UpdateApp();		//update the app
			elseif i = 2 then
				if readloginstatus() = 1 then
					advance to LOGIN;
				endif;
			endif;
		endif;
	endif;
	
	if readloginstatus() = 1 then		//if already logged in
		advance to LOGIN;					//just login
	endif;

//------------------------------------------------------------
PROC USERID
//code to make sure that the valueset label matches Username
postproc
	uid = maketext("%04d",$);
	if loadcase(USERS_DICT,uid) then
		if compare(UN_USERNAME,UNAME) = 0 then
			writeLoginStatus(1);
			username = strip(UN_NAME);
			role = UN_ROLE;
		else
			errmsg("Username and ID don't match! Please try again");
			move to UNAME;
		endif;
	else
		errmsg("No user with the username %v was found",strip(UNAME));
		move to UNAME;
	endif;

{	if getlabel(USERID_VS1,$) = strip(UNAME) then
		writeLoginStatus(1);//success
	else
		errmsg("Username and ID don't match! Please try again");
		move to UNAME;
	endif;
}	
	//get allocations
	//DEBUG: enable this after allocation have been implemented
	uid = maketext("%v",USERID);
	if loadcase(USERS_DICT,uid) = 0 and role = 1 then		//if no allocations found
		if connection() then		//if on the internet
			if syncconnect(CSWeb,cswebip1,ftpun,ftppw) then		//connect to csweb when outside of the Government WAN
				syncdata(GET, USERS_DICT);		//get allocations
				allocationdate = sysdate("YYYYMMDD");
				savesetting("ALLOCATIONDATE",maketext("%d",allocationdate));		//saves so that it's persistent between sessions
			elseif syncconnect(CSWeb,cswebip2,ftpun,ftppw) then	
				syncdata(GET, USERS_DICT);		//get allocations
				allocationdate = sysdate("YYYYMMDD");
				savesetting("ALLOCATIONDATE",maketext("%d",allocationdate));		//saves so that it's persistent between sessions
			endif;
		endif;
	endif;


//---------------------------------------------------------------
PROC ME_ED
onfocus
	//displays saved ED  number

	$ = tonumber(loadsetting("ED")); 
	
	//reset arrays
	numeric nextEntry = 1;
	while nextEntry <= 10 do
		vsEDCode(NextEntry) = notappl;
		vsLabel(nextEntry) = "";
		inc(nextEntry);
	enddo;
	
	if role = 1 then
		//load ED from lookup file
		nextEntry = 1;
		uid = maketext("%v",USERID);
		if loadcase(USERS_DICT,uid) then
			while nextEntry <= count(UED) do
				vsEDCode(nextEntry) = UED(nextEntry);
				vsLabel(nextEntry) = maketext("%v",UED(nextEntry));
				inc(nextEntry);
			enddo;
		endif;
		setvalueset(ME_ED,vsEDCode,VsLabel);
		
		if vsEDcode(1) in notappl,0 then
			errmsg("There are no allocations available");
		endif;
	elseif role <> 1 then
		setvalueset(ME_ED,ME_ED_VS1);
	endif;
	
postproc
	//saves the ED number as a setting
	savesetting("ED",maketext("%d",$));
	setoperatorid(UNAME);
	
	recode $	=>	ME_PARISH;		//recode ed to parish
		1-181	=>	1;	//St. Michael
		182-295	=>	2;	//Christ Church
		196-335	=>	3;	//St. George
		336-397	=>	4;	//St. Philip
		398-418	=>	5;	//St. John
		419-479	=>	6;	//St. James
		480-508	=>	7;	//St. Thomas
		509-521 =>	8;	//St. Joseph
		522-532	=>	9;	//St. Andrew
		533-559	=>	10;	//St. Peter
		560-583	=>	11;	//St. Lucy
	endrecode;
	
	
//--------------------------------------------------------------------
PROC LOGIN
onfocus
	$ = notappl;

	if role = 2 then		//Supervisor
		setvalueset(LOGIN,LOGIN_VS1);
	elseif role = 1 then	//enumerator
		setvalueset(LOGIN,LOGIN_VS2);
	elseif role = 0 then	//admin
		//TODO: implement a valueset for admin
	endif;
	
	//resumeMenu();
	
postproc
	if $ = 1 then	//interviewer
		skip to INTERVIEWER_MENU;
	elseif $ = 2 then 	//supervisor
		skip to SUPERVISOR_MENU;
	elseif $ = 3 then		//change ED
		move to ME_ED;
	elseif $ = 4 then		//update app
		if connection() then
			updateApp();
		else
			errmsg("Please connect to the internet before updating the app");
		endif;
	elseif $ = 5 then		//upload data
		if connection() then
			uploadData();	
		else
			errmsg("Please connect to the internet before uploading data");
		endif;
	elseif $ = 9 then
		writeloginstatus(0);
		stop(1);
	endif;

	reenter;
//---------------------------------------------------
PROC INTERVIEWER_MENU
onfocus
	$ = notappl;	//don't show the last selection
	
postproc
	if $ = 1 then		//start new questionnaire
		addQuestionnaire();
	elseif $ = 2 then	//view questionnaire
		skip to CHOOSE_HOUSEHOLD;		
	elseif $ = 3 then	//fill new visitation record
		launchVR();
	elseif $ = 4 then	//View visitation record
		viewVisitationRecord();
	elseif $ = 5 then	//delete questionnaire
		skip to CHOOSE_HOUSEHOLD;
	elseif $ = 6 then	//upload data
		uploadData();
	elseif $ = 9 then	//logout
		move to LOGIN;
	endif;
reenter;		//don't leave the menu


//-----------------------------------------------------------------------------
PROC SUPERVISOR_MENU
onfocus
	$ = notappl;	//don't show the last selection
	
postproc
	if $ = 1 then		//Download Data
		downloadData();
	elseif $ = 2 then	//Open questionnaire
		skip to CHOOSE_HOUSEHOLD;		
	elseif $ = 3 then	//View visitation record
		viewVisitationRecord();
	elseif $ = 4 then	//Allocate officers
		//allocateenum();
	elseif $ = 5 then	//mark ED as complete
		edcomplete();
	elseif $ = 6 then	//delete questinonaire
		skip to CHOOSE_HOUSEHOLD;
	elseif $ = 9 then	//logout
		move to LOGIN;
	endif;
reenter;		//don't leave the menu


//----------------------------------------------------------------------
PROC CHOOSE_HOUSEHOLD
//chooses a household to view. TODO: may need to include partially saved cases
onfocus
	numeric nextEntry = 1;
	forcase CENSUS2020_DICT where ED = ME_ED do
		if ispartial(CENSUS2020_DICT) then
			partial = "(Not complete)";
		else
			partial = "(Completed)";
		endif;
		
		vscode(nextEntry) = maketext("%v%v%v%v%v",PARISH,ED,BUILDING,DWELLING_UNIT,HOUSEHOLD);
		vsLabel(nextEntry) = maketext("%v-%v-%v: %V %v%V(%v)",BUILDING,DWELLING_UNIT,HOUSEHOLD,strip(LAST_NAME(1)),partial,getlabel(DELETE_FLAG_VS2,DELETE_FLAG),strip(COMMENTS));
		inc(nextEntry);
	endfor;
	
	vsCode(nextEntry) = "";
	
	setvalueset($, vsCode, vsLabel);
	
	if vsCode(1) = "" then		//if nothing is in the valueset
		errmsg("There are no questionnaires available for this ED (ED%d). Please fill out a control sheet first",ME_ED);
		if LOGIN = 1 then 
			move to INTERVIEWER_MENU;
		elseif LOGIN = 2 then
			move to SUPERVISOR_MENU;
		endif;
	endif;

postproc
	//CHOOSE_HOUSEHOLD = maketext("%15.14s",CHOOSE_HOUSEHOLD);		//workaround to make this shit work I shouldn't have to hack this to make it work!
	
	//saveMenu();
	
	if (LOGIN = 1 and INTERVIEWER_MENU in 2) or (LOGIN = 2 and SUPERVISOR_MENU = 2) then
		viewQuestionnaire();
	elseif (LOGIN = 1 and INTERVIEWER_MENU = 5) or (LOGIN = 2 and SUPERVISOR_MENU = 6) then
		deletequestionnaire();
	endif;


//-----------------------------------------------------------------------
PROC CHOOSE_VR

onfocus
	numeric nextEntry = 1;
	forcase VISITATION_RECORD_DICT do
		vscode(nextEntry) = maketext("%v%v%v%v%v",VI_PARISH,VI_ED,VI_BUILDING,VI_DWELLING_UNIT,VI_HOUSEHOLD);
		vsLabel(nextEntry) = maketext("%v%v%v: %V, %V (%v)",VI_BUILDING,VI_DWELLING_UNIT,VI_HOUSEHOLD,strip(VI_LAST_NAME),strip(VI_FIRST_NAME),getlabel(VI_STATUS_VS1,VI_STATUS));
		inc(nextEntry);
	endfor;
	
	vsCode(nextEntry) = "";
	
	setvalueset($, vsCode, vsLabel);

postproc
	//saveMenu();
//	launchSupervisorVR();
	move to LOGIN;


//----------------------------------------------------------------
PROC ALLOCATE_ENUMERATOR
postproc
	allocateenum();
	move to SUPERVISOR_MENU;
